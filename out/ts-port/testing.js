import { factorint, factorrat } from "./ntheory/factor_.js";
import { Add } from "./core/add.js";
import { Mul } from "./core/mul.js";
import { _Number_ } from "./core/numbers.js";
import { Pow } from "./core/power.js";
import { S } from "./core/singleton.js";
import { Symbol } from "./core/symbol.js";
const n = _Number_.new(4);
const n2 = _Number_.new(4, 9);
const n3 = _Number_.new(-1.5);
const n4 = _Number_.new(1, 3);
const x = new Symbol("x");
console.log(new Add(true, true, n, n2, x));
console.log(new Add(false, true, n, n2, x));
console.log(new Add(true, true, x, x, x));
console.log(new Add(true, true, x, x, new Add(true, true, n, n2, x)));
console.log(new Add(true, true, x, new Mul(true, true, n, x)));
console.log(new Mul(true, true, n, n2, x));
console.log(new Mul(false, true, n, n2, x));
console.log(new Mul(true, true, x, x, x));
console.log(new Mul(true, true, x, x, new Mul(true, true, n, n2, x)));
console.log(new Mul(true, true, x, new Pow(n, x)));
console.log(new Mul(true, true, new Pow(n, x), new Pow(n, x)));
console.log(new Pow(n, n));
console.log(new Pow(n, x));
console.log(new Pow(n, n2));
console.log(new Pow(n3, n4));
console.log(new Pow(n, x).subs(x, n4));
console.log(new Mul(false, true, n, n2, x).subs(x, n2));
console.log(new Add(false, true, n, n2, x).subs(x, n));
const bigint = _Number_.new(285);
console.log(factorint(bigint));
const bigrat = _Number_.new(271, 932);
console.log(factorrat(bigrat));
console.log(new Mul(true, true, S.ComplexInfinity, S.NegativeInfinity, x));
console.log(new Mul(true, true, S.Infinity, n2, x));
console.log(new Pow(n, S.NaN));
//# sourceMappingURL=testing.js.map